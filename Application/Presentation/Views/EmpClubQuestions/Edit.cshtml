@model ViewModels.EmpClubQuestionViewModel

@{
    ViewBag.Title = "ویرایش " + Server.HtmlDecode(Html.DisplayNameFor(model => model).ToString());
    Layout = "~/Views/Shared/BackEndLayout/_BackEndLayout.cshtml";
}
<div class="row">
    <div class="col-md-6">
        <h2>@ViewBag.Title</h2>

        @using (Html.BeginForm("Edit", "EmpClubQuestions", new { status = @ViewBag.status }, FormMethod.Post, new { enctype = "multipart/form-data" }))
        {
            @Html.AntiForgeryToken()

            <div class="form-horizontal">
                <hr />
                @Html.ValidationSummary(true)
                @Html.HiddenFor(model => model.UserQuestion.Id)
                @Html.HiddenFor(model => model.UserQuestion.UserId)
                @Html.HiddenFor(model => model.UserQuestion.Subject)
                @Html.HiddenFor(model => model.UserQuestion.Question)


                <div class="form-group">
                    @Html.LabelFor(model => model.UserQuestion.Subject, new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DisplayFor(model => model.UserQuestion.Subject)
                        @Html.ValidationMessageFor(model => model.UserQuestion.Subject)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.UserQuestion.Question, new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DisplayFor(model => model.UserQuestion.Question)
                        @Html.ValidationMessageFor(model => model.UserQuestion.Question)
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.UserQuestion.Response, new { @class = "control-label col-md-2" })
                    <div class="col-md-6">
                        @Html.EditorFor(model => model.UserQuestion.Response)
                        @Html.ValidationMessageFor(model => model.UserQuestion.Response)
                    </div>

                    <div class="col-md-12 audio-holder">
                        @if (!string.IsNullOrEmpty(Model.UserQuestion.VoiceResponse))
                        {
                            <label class="control-label">پاسخ صوتی : </label>
                            <audio controls>
                                <source src="@Model.UserQuestion.VoiceResponse" type="audio/ogg">
                            </audio>
                            <button type="button" class="btn btn-danger remove-voice">حذف پاسخ صوتی</button>
                        }
                        else
                        {
                            <p>پاسخ صوتی : در حال حاضر پاسخ صوتی ارسال نشده.</p>
                        }
                    </div>

                    <div class="col-md-8 recorder-holder">
                        <button type="button" class="start">
                            شروع ثبت صدا<i class="fa fa-microphone fa-3x"></i>
                        </button>
                        <button type="button" class="stop">
                            ذخیره<i class="fa fa-save fa-3x"></i>
                        </button>
                    </div>
                </div>



                @Html.HiddenFor(model => model.UserQuestion.IsActive)
                @Html.HiddenFor(model => model.UserQuestion.ResponseDate)
                @Html.HiddenFor(model => model.UserQuestion.CreationDate)
                @Html.HiddenFor(model => model.UserQuestion.Description)


                <div class="form-group" id="buttons">
                    <div class="col-md-offset-2 col-md-10">
                        <input type="submit" value="ثبت" class="btn btn-primary" />
                        @Html.ActionLink("بازگشت به فهرست", "Index")
                    </div>
                </div>
            </div>
        }
    </div>

    @* ****************(user question list)**************** *@
    <div class="pane panel-primary col-md-6" style="margin-top:6.3rem;">
        <div class="panel-heading text-center">
            لیست سوالات قبلی کاربر
        </div>
        @foreach (var question in Model.UserQuestions)
        {
            <div class="row panel-body w-100">
                <div class="col-md-10 mr-5">
                    <div class="row py-1 date-s">
                        <div class="col p-1">
                            <label class="control-label">تاریخ سوال :</label><b>@question.CreationDate</b>
                        </div>
                    </div>
                    <div class="row question-s">
                        <div class="col p-1">
                            <label class="control-label">سوال :</label><b>@question.Question</b>
                        </div>
                    </div>
                    <div class="row answer-s">
                        <div class="col p-1">
                            <label class="control-label">پاسخ :</label><b>@question.Response</b>
                        </div>
                    </div>
                    <div class="row date-s">
                        <div class="col p-1">
                            <a href="/EmpClubQuestions/Edit/@question.Id.ToString()" class="btn btn-success"> ویرایش</a>
                        </div>
                    </div>
                </div>
            </div>
            <hr class="hr" />
        }

    </div>
</div>
@section scripts{
    <script>
        {
            const record = document.querySelector('.start');
            const stop = document.querySelector('.stop');
            const soundClips = document.querySelector('.play');


            if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
                console.log('getUserMedia supported.');
                navigator.mediaDevices.getUserMedia(
                    // constraints - only audio needed for this app
                    {
                        audio: true
                    })

                    // Success callback
                    .then(function (stream) {

                        mediaRecorder = new MediaRecorder(stream);

                        let chunks = [];

                        mediaRecorder.ondataavailable = function (e) {
                            chunks.push(e.data);
                        }

                        record.onclick = function () {
                            mediaRecorder.start();
                            console.log(mediaRecorder.state);
                            console.log("recorder started");
                            record.style.background = "red";
                            record.style.color = "black";
                        }

                        stop.onclick = function () {
                            mediaRecorder.stop();
                            console.log(mediaRecorder.state);
                            console.log("recorder stopped");
                            record.style.background = "";
                            record.style.color = "";
                        }

                        mediaRecorder.onstop = function (e) {
                            console.log("recorder stopped");

                            //const clipName = "voice.ogg";

                            //const clipContainer = document.createElement('article');
                            //const clipLabel = document.createElement('p');
                            //const audio = document.createElement('audio');
                            //const deleteButton = document.createElement('button');

                            //clipContainer.classList.add('clip');
                            //audio.setAttribute('controls', '');
                            //deleteButton.innerHTML = "Delete";
                            //clipLabel.innerHTML = clipName;

                            //clipContainer.appendChild(audio);
                            //clipContainer.appendChild(clipLabel);
                            //clipContainer.appendChild(deleteButton);
                            //soundClips.appendChild(clipContainer);

                            const blob = new Blob(chunks, { type: 'audio/ogg' });
                            chunks = [];
                            const audioURL = window.URL.createObjectURL(blob);
                            //audio.src = audioURL;

                            var reader = new window.FileReader();
                            reader.readAsDataURL(blob);
                            reader.onloadend = function (reader) {
                                var base64 = reader.target.result;
                                var base64 = base64.split(',')[1];

                                //var fd = new FormData();
                            @*fd.append('id', '@Model.UserQuestion.Id');*@
                                //fd.append('date', blob);

                                $.ajax({
                                    url: '/EmpClubQuestions/SaveVoice',
                                    type: 'POST',
                                    data: {
                                    id:'@Model.UserQuestion.Id', audio: base64
                                },

                                    success: function (response) {
                                        console.log(response); 
                                        Location.reload(true);
                                    },
                                    error: function (response) { console.log(response); }
                                });
                            }

                                deleteButton.onclick = function (e) {
                                    let evtTgt = e.target;
                                    evtTgt.parentNode.parentNode.removeChild(evtTgt.parentNode);
                                }
                            }

                        }
                     )
                    // Error callback
                    .catch(function (err) {
                        console.log('The following getUserMedia error occurred: ' + err);
                    });
            } else {
                console.log('getUserMedia not supported on your browser!');
            }

        }
    </script>
    <script>
        {
            let removeVoice = document.querySelector(".remove-voice");
            removeVoice.onclick = function () {
                $.ajax({
                    url: "/EmpClubQuestions/RemoveVoice",
                    method: "POST",
                    data: { id:'@Model.UserQuestion.Id', filePath: '@Model.UserQuestion.VoiceResponse' },
                    success: function (response) {
                        console.log(response);
                        Location.reload(true);
                    },
                    error: function (response) { console.log(response);}
                });
            }
        }
    </script>
}